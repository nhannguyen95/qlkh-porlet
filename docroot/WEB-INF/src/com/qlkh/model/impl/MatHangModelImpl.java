/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.qlkh.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.qlkh.model.MatHang;
import com.qlkh.model.MatHangModel;
import com.qlkh.model.MatHangSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MatHang service. Represents a row in the &quot;QLKH_MatHang&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.qlkh.model.MatHangModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MatHangImpl}.
 * </p>
 *
 * @author apple
 * @see MatHangImpl
 * @see com.qlkh.model.MatHang
 * @see com.qlkh.model.MatHangModel
 * @generated
 */
@JSON(strict = true)
public class MatHangModelImpl extends BaseModelImpl<MatHang>
	implements MatHangModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mat hang model instance should use the {@link com.qlkh.model.MatHang} interface instead.
	 */
	public static final String TABLE_NAME = "QLKH_MatHang";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MaHang", Types.VARCHAR },
			{ "TenHang", Types.VARCHAR },
			{ "GiaThanh", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table QLKH_MatHang (MaHang VARCHAR(75) not null primary key,TenHang VARCHAR(75) null,GiaThanh VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table QLKH_MatHang";
	public static final String ORDER_BY_JPQL = " ORDER BY matHang.MaHang ASC";
	public static final String ORDER_BY_SQL = " ORDER BY QLKH_MatHang.MaHang ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.qlkh.model.MatHang"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.qlkh.model.MatHang"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MatHang toModel(MatHangSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MatHang model = new MatHangImpl();

		model.setMaHang(soapModel.getMaHang());
		model.setTenHang(soapModel.getTenHang());
		model.setGiaThanh(soapModel.getGiaThanh());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MatHang> toModels(MatHangSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MatHang> models = new ArrayList<MatHang>(soapModels.length);

		for (MatHangSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.qlkh.model.MatHang"));

	public MatHangModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _MaHang;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setMaHang(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _MaHang;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return MatHang.class;
	}

	@Override
	public String getModelClassName() {
		return MatHang.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("MaHang", getMaHang());
		attributes.put("TenHang", getTenHang());
		attributes.put("GiaThanh", getGiaThanh());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String MaHang = (String)attributes.get("MaHang");

		if (MaHang != null) {
			setMaHang(MaHang);
		}

		String TenHang = (String)attributes.get("TenHang");

		if (TenHang != null) {
			setTenHang(TenHang);
		}

		String GiaThanh = (String)attributes.get("GiaThanh");

		if (GiaThanh != null) {
			setGiaThanh(GiaThanh);
		}
	}

	@JSON
	@Override
	public String getMaHang() {
		if (_MaHang == null) {
			return StringPool.BLANK;
		}
		else {
			return _MaHang;
		}
	}

	@Override
	public void setMaHang(String MaHang) {
		_MaHang = MaHang;
	}

	@JSON
	@Override
	public String getTenHang() {
		if (_TenHang == null) {
			return StringPool.BLANK;
		}
		else {
			return _TenHang;
		}
	}

	@Override
	public void setTenHang(String TenHang) {
		_TenHang = TenHang;
	}

	@JSON
	@Override
	public String getGiaThanh() {
		if (_GiaThanh == null) {
			return StringPool.BLANK;
		}
		else {
			return _GiaThanh;
		}
	}

	@Override
	public void setGiaThanh(String GiaThanh) {
		_GiaThanh = GiaThanh;
	}

	@Override
	public MatHang toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MatHang)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MatHangImpl matHangImpl = new MatHangImpl();

		matHangImpl.setMaHang(getMaHang());
		matHangImpl.setTenHang(getTenHang());
		matHangImpl.setGiaThanh(getGiaThanh());

		matHangImpl.resetOriginalValues();

		return matHangImpl;
	}

	@Override
	public int compareTo(MatHang matHang) {
		String primaryKey = matHang.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MatHang)) {
			return false;
		}

		MatHang matHang = (MatHang)obj;

		String primaryKey = matHang.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MatHang> toCacheModel() {
		MatHangCacheModel matHangCacheModel = new MatHangCacheModel();

		matHangCacheModel.MaHang = getMaHang();

		String MaHang = matHangCacheModel.MaHang;

		if ((MaHang != null) && (MaHang.length() == 0)) {
			matHangCacheModel.MaHang = null;
		}

		matHangCacheModel.TenHang = getTenHang();

		String TenHang = matHangCacheModel.TenHang;

		if ((TenHang != null) && (TenHang.length() == 0)) {
			matHangCacheModel.TenHang = null;
		}

		matHangCacheModel.GiaThanh = getGiaThanh();

		String GiaThanh = matHangCacheModel.GiaThanh;

		if ((GiaThanh != null) && (GiaThanh.length() == 0)) {
			matHangCacheModel.GiaThanh = null;
		}

		return matHangCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{MaHang=");
		sb.append(getMaHang());
		sb.append(", TenHang=");
		sb.append(getTenHang());
		sb.append(", GiaThanh=");
		sb.append(getGiaThanh());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.qlkh.model.MatHang");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>MaHang</column-name><column-value><![CDATA[");
		sb.append(getMaHang());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TenHang</column-name><column-value><![CDATA[");
		sb.append(getTenHang());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>GiaThanh</column-name><column-value><![CDATA[");
		sb.append(getGiaThanh());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MatHang.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MatHang.class
		};
	private String _MaHang;
	private String _TenHang;
	private String _GiaThanh;
	private MatHang _escapedModel;
}