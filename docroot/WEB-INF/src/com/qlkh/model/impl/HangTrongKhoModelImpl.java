/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.qlkh.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.qlkh.model.HangTrongKho;
import com.qlkh.model.HangTrongKhoModel;
import com.qlkh.model.HangTrongKhoSoap;

import com.qlkh.service.persistence.HangTrongKhoPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the HangTrongKho service. Represents a row in the &quot;QLKH_HangTrongKho&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.qlkh.model.HangTrongKhoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HangTrongKhoImpl}.
 * </p>
 *
 * @author apple
 * @see HangTrongKhoImpl
 * @see com.qlkh.model.HangTrongKho
 * @see com.qlkh.model.HangTrongKhoModel
 * @generated
 */
@JSON(strict = true)
public class HangTrongKhoModelImpl extends BaseModelImpl<HangTrongKho>
	implements HangTrongKhoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hang trong kho model instance should use the {@link com.qlkh.model.HangTrongKho} interface instead.
	 */
	public static final String TABLE_NAME = "QLKH_HangTrongKho";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MaKho", Types.VARCHAR },
			{ "MaHang", Types.VARCHAR },
			{ "SoLuong", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table QLKH_HangTrongKho (MaKho VARCHAR(75) not null,MaHang VARCHAR(75) not null,SoLuong LONG,primary key (MaKho, MaHang))";
	public static final String TABLE_SQL_DROP = "drop table QLKH_HangTrongKho";
	public static final String ORDER_BY_JPQL = " ORDER BY hangTrongKho.id.MaKho ASC, hangTrongKho.id.MaHang ASC";
	public static final String ORDER_BY_SQL = " ORDER BY QLKH_HangTrongKho.MaKho ASC, QLKH_HangTrongKho.MaHang ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.qlkh.model.HangTrongKho"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.qlkh.model.HangTrongKho"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HangTrongKho toModel(HangTrongKhoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		HangTrongKho model = new HangTrongKhoImpl();

		model.setMaKho(soapModel.getMaKho());
		model.setMaHang(soapModel.getMaHang());
		model.setSoLuong(soapModel.getSoLuong());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HangTrongKho> toModels(HangTrongKhoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<HangTrongKho> models = new ArrayList<HangTrongKho>(soapModels.length);

		for (HangTrongKhoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.qlkh.model.HangTrongKho"));

	public HangTrongKhoModelImpl() {
	}

	@Override
	public HangTrongKhoPK getPrimaryKey() {
		return new HangTrongKhoPK(_MaKho, _MaHang);
	}

	@Override
	public void setPrimaryKey(HangTrongKhoPK primaryKey) {
		setMaKho(primaryKey.MaKho);
		setMaHang(primaryKey.MaHang);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new HangTrongKhoPK(_MaKho, _MaHang);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((HangTrongKhoPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return HangTrongKho.class;
	}

	@Override
	public String getModelClassName() {
		return HangTrongKho.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("MaKho", getMaKho());
		attributes.put("MaHang", getMaHang());
		attributes.put("SoLuong", getSoLuong());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String MaKho = (String)attributes.get("MaKho");

		if (MaKho != null) {
			setMaKho(MaKho);
		}

		String MaHang = (String)attributes.get("MaHang");

		if (MaHang != null) {
			setMaHang(MaHang);
		}

		Long SoLuong = (Long)attributes.get("SoLuong");

		if (SoLuong != null) {
			setSoLuong(SoLuong);
		}
	}

	@JSON
	@Override
	public String getMaKho() {
		if (_MaKho == null) {
			return StringPool.BLANK;
		}
		else {
			return _MaKho;
		}
	}

	@Override
	public void setMaKho(String MaKho) {
		_MaKho = MaKho;
	}

	@JSON
	@Override
	public String getMaHang() {
		if (_MaHang == null) {
			return StringPool.BLANK;
		}
		else {
			return _MaHang;
		}
	}

	@Override
	public void setMaHang(String MaHang) {
		_MaHang = MaHang;
	}

	@JSON
	@Override
	public long getSoLuong() {
		return _SoLuong;
	}

	@Override
	public void setSoLuong(long SoLuong) {
		_SoLuong = SoLuong;
	}

	@Override
	public HangTrongKho toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HangTrongKho)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HangTrongKhoImpl hangTrongKhoImpl = new HangTrongKhoImpl();

		hangTrongKhoImpl.setMaKho(getMaKho());
		hangTrongKhoImpl.setMaHang(getMaHang());
		hangTrongKhoImpl.setSoLuong(getSoLuong());

		hangTrongKhoImpl.resetOriginalValues();

		return hangTrongKhoImpl;
	}

	@Override
	public int compareTo(HangTrongKho hangTrongKho) {
		HangTrongKhoPK primaryKey = hangTrongKho.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HangTrongKho)) {
			return false;
		}

		HangTrongKho hangTrongKho = (HangTrongKho)obj;

		HangTrongKhoPK primaryKey = hangTrongKho.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<HangTrongKho> toCacheModel() {
		HangTrongKhoCacheModel hangTrongKhoCacheModel = new HangTrongKhoCacheModel();

		hangTrongKhoCacheModel.MaKho = getMaKho();

		String MaKho = hangTrongKhoCacheModel.MaKho;

		if ((MaKho != null) && (MaKho.length() == 0)) {
			hangTrongKhoCacheModel.MaKho = null;
		}

		hangTrongKhoCacheModel.MaHang = getMaHang();

		String MaHang = hangTrongKhoCacheModel.MaHang;

		if ((MaHang != null) && (MaHang.length() == 0)) {
			hangTrongKhoCacheModel.MaHang = null;
		}

		hangTrongKhoCacheModel.SoLuong = getSoLuong();

		return hangTrongKhoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{MaKho=");
		sb.append(getMaKho());
		sb.append(", MaHang=");
		sb.append(getMaHang());
		sb.append(", SoLuong=");
		sb.append(getSoLuong());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.qlkh.model.HangTrongKho");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>MaKho</column-name><column-value><![CDATA[");
		sb.append(getMaKho());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MaHang</column-name><column-value><![CDATA[");
		sb.append(getMaHang());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SoLuong</column-name><column-value><![CDATA[");
		sb.append(getSoLuong());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HangTrongKho.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			HangTrongKho.class
		};
	private String _MaKho;
	private String _MaHang;
	private long _SoLuong;
	private HangTrongKho _escapedModel;
}